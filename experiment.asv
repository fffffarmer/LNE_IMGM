%% Initialization
clear *;clear -global *;close all;clc; clear all;

global affinity;
global target;
varyMinGrhCnt=4;varyMaxGrhCnt=32;grhTestCnt = 5;% 

nodeCnt = 10;
graphCnt = 50;
testCnt = 5;
nInlier = 10;
paraCnt = 8;

target.config.database = 'synthetic';% only synthetic test is allowed here
target.config.testType = 'formal';% massOutlier

target.config.category = 'deform';%'deform','outlier','density','complete'
switch target.config.category
    case 'deform'% same setting with 5th row in Table 1 in the PAMI paper 
        nInlier = 10;target.config.nOutlier = 0;
        target.config.deform = 0.15; % Gaussian noise 
        target.config.density = .9; % density parameter 老
        target.config.complete = 1;
        graphMinCnt = varyMinGrhCnt;graphMaxCnt = varyMaxGrhCnt;testCnt = grhTestCnt;
    case 'outlier'% same setting with 6th row in Table 1 in the PAMI paper 
        nInlier = 6;target.config.nOutlier = 4;
        target.config.deform = 0; % Gaussian noise 
        target.config.density = 1; % density parameter 老
        target.config.complete = 1;
        graphMinCnt = varyMinGrhCnt;graphMaxCnt = varyMaxGrhCnt;testCnt = grhTestCnt;
    case 'density'% same setting with 7th row in Table 1 in the PAMI paper 
        nInlier = 10;target.config.nOutlier = 0;
        target.config.deform = 0.0; % Gaussian noise 
        target.config.density = 0.5; % density parameter 老
        target.config.complete = 1;
        graphMinCnt = varyMinGrhCnt;graphMaxCnt = varyMaxGrhCnt;testCnt = grhTestCnt;
    case 'complete'% same setting with 8th row in Table 1 in the PAMI paper 
        nInlier = 10;target.config.nOutlier = 0;
        target.config.deform = 0.05; % Gaussian noise 
        target.config.density = 1; % density parameter 老
        target.config.complete = 0.1;     
end

iterRange = 6;
graphRange = graphMinCnt:4:graphMaxCnt;

target.config.graphCnt = graphCnt;
target.config.nodeCnt = nodeCnt;
target.config.inCntType = 'exact'; % set 'exact' for "more outlier case", e.g. Fig.5 and Fig.6
target.config.Sacle_2D = 0.05; % 'Sacle' is a typo

target.config.edgeAffinityWeight = 1;% in random graphs, only edge affinity is used, angle is meaningless
target.config.angleAffinityWeight = 1 - target.config.edgeAffinityWeight;
target.config.bGraphMatch = 0;% set to 1 use random graphs, otherwise use random points as set in the MPM code/paper
target.config.category = 'outlier';% only outlier are supported here

setObsoleteVariables;% some old parameters are used for debug and other tests, less relevant to the algorithm
algpar = setPairwiseSolver();

%% Run the test
for testk = 1:testCnt
    fprintf('Run test in round %d\n', testk);

    affinity = generateRandomAffinity(nInlier,testk); 
    affinity.GT = repmat(eye(nodeCnt,nodeCnt),graphCnt,graphCnt);

    % rrwm pairwise match, once for all graph pairs
    tStart = tic;
    rawMat = generatePairAssignment(algpar,nodeCnt,graphCnt,testk);
    rawTotalTime = toc(tStart);
    
    switch target.config.inCntType
        case 'exact' % already known, used in Fig.5 and top two rows in Fig.6
             target.config.inCnt = nodeCnt - target.config.nOutlier;
        case 'all' % in case of few outliers, used in Fig.1,2,3,4
             target.config.inCnt = nodeCnt;
        case 'spec' % specified by user, used in the bottom row of Fig.6
            target.config.inCnt = specNodeCnt;
    end
    
    scrDenomMatInCnt = cal_pair_graph_inlier_score(rawMat,affinity.GT,nodeCnt,graphCnt,target.config.inCnt);
    scrDenomMatInCntGT = cal_pair_graph_inlier_score(affinity.GT,affinity.GT,nodeCnt,graphCnt,target.config.inCnt);

    for parak = 1:paraCnt
        viewCnt = graphRange(parak);
        rawPairMatchTime = rawTotalTime*viewCnt*(viewCnt-1)/(graphCnt*(graphCnt-1));
        
        offsetStep = graphRange(end);%for synthetic test, no need inner loop for a given set of graphs of size viewCnt
        affinity.viewCnt = viewCnt;
        subParaCnt = length(1:offsetStep:graphCnt-viewCnt+1);
        
        for grhOffset = 1:offsetStep:graphCnt-viewCnt+1%this logic can be ignored in the demo code, it is used for real image data
            rawscopeX = (grhOffset-1)*nodeCnt+1:(grhOffset+viewCnt-1)*nodeCnt;
            rawScopeY = (grhOffset-1)*nodeCnt+1:(grhOffset+viewCnt-1)*nodeCnt;
            affinity.Xgt = affinity.GT(rawscopeX,rawScopeY);
            baseMat = rawMat(rawscopeX,rawScopeY);
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%             X{rrwmIdx} = baseMat;
%             timAve(parak,rrwmIdx,testk) = timAve(parak,rrwmIdx,testk) + rawPairMatchTime;
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            
            scrDenom = max(max(scrDenomMatInCnt(1:viewCnt,1:viewCnt)));%used to normalize the affinity score in the objective
            tStart = tic;
            % the following function returns both consistency and affinity, here only consistency needed
            % it also does not discriminate between inliers and outliers
            singleGraphConstList = cal_single_graph_consistency_score(baseMat,nodeCnt,viewCnt);
            [C,refConstGraph] = max(singleGraphConstList);
            % given the reference graph r, first compute the unary
            % graph-wise consistency, then rank them into cstGrhList
            cstGrhList = rankGrhByConsistencyToRefGrh(baseMat,refConstGraph,nodeCnt,viewCnt);
            updGrhList = [cstGrhList,refConstGraph];%for consistency rank
            refGraph = updGrhList(end);
            cstCalTime = toc(tStart);
            
            %% IMGM_old
            param.n = 10; param.N = graphCnt - 1;
            param.iterMax = iterRange;
            param.visualization = 0;
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            param.method = 1;
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            scrDenomCurrent = max(max(scrDenomMatInCnt(1:param.N,1:param.N)));
            % tStart = tic;
            currentMat = CAO(rawMat(1:end-nodeCnt,1:end-nodeCnt),nodeCnt, param.N, iterRange,scrDenomCurrent, 'pair',1);
            % timsCost = toc(tStart)
            
            affScore = scrDenomMatInCnt;
            rawMatTmp = rawMat;
            rawMatTmp(1:end-nodeCnt,1:end-nodeCnt)=currentMat;
            scrDenomMatInCntTmp = cal_pair_graph_inlier_score(rawMatTmp,affinity.GT,nodeCnt,graphCnt,target.config.inCnt);
            conDenomMatInCntTmp = cal_pair_graph_consistency(rawMatTmp,nodeCnt,graphCnt,0);
            %%%%%%%%%%%%%%%testing different similarity%%%%%%%%%%
            sigma = 0;
            simAP = (1-sigma)*scrDenomMatInCntTmp + sigma*conDenomMatInCntTmp;
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            tStart = tic;
            Xmatching = IMGM_old(simAP, rawMatTmp, param);
            timsCost = toc(tStart)
            accIMGM = cal_pair_graph_accuracy(Xmatching,affinity.GT,target.config.nOutlier,nodeCnt,graphCnt);
            scrIMGM = cal_pair_graph_score(Xmatching,affinity.GT,nodeCnt,graphCnt);
            conIMGM = cal_pair_graph_consistency(Xmatching,nodeCnt,graphCnt,0);
            results = ['The results of IMGM on 50 graphs, accuracy:',num2str(mean(accIMGM(:))),', score:',num2str(mean(scrIMGM(:))),', consistency:',num2str(mean(conIMGM(:)))];
            disp(results);
            
            scrDenomCurrent = max(max(scrDenomMatInCnt(1:end,1:end)));
            tStart = tic;
            Xoriginal = CAO(rawMatTmp, nodeCnt, graphCnt, iterRange, scrDenomCurrent, 'pair',1);
            timsCost = toc(tStart)
            accCAO = cal_pair_graph_accuracy(Xoriginal,affinity.GT,target.config.nOutlier,nodeCnt,graphCnt);
            scrCAO = cal_pair_graph_score(Xoriginal,affinity.GT,nodeCnt,graphCnt);
            conCAO = cal_pair_graph_consistency(Xoriginal,nodeCnt,graphCnt,0);
            results = ['The results of CAO-R on 50 graphs, accuracy:',num2str(mean(accCAO(:))),', score:',num2str(mean(scrCAO(:))),', consistency:',num2str(mean(conCAO(:)))];
            disp(results);
            
            tStart = tic;
            Xoriginal = CAO(rawMat, nodeCnt, graphCnt, iterRange, scrDenomCurrent, 'pair',1);
            timsCost = toc(tStart)
            accCAO = cal_pair_graph_accuracy(Xoriginal,affinity.GT,target.config.nOutlier,nodeCnt,graphCnt);
            scrCAO = cal_pair_graph_score(Xoriginal,affinity.GT,nodeCnt,graphCnt);
            conCAO = cal_pair_graph_consistency(Xoriginal,nodeCnt,graphCnt,0);
            results = ['The results of CAO on 50 graphs, accuracy:',num2str(mean(accCAO(:))),', score:',num2str(mean(scrCAO(:))),', consistency:',num2str(mean(conCAO(:)))];
            disp(results);
        end
    end
end